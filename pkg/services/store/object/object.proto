syntax = "proto3";
package object;

option go_package = "./;object";

// Will be replaced with something from the SDK
message UserInfo {
  int64 id = 1; // internal grafana ID
  string login = 2; // string ID? 
}

// Raw saved object metadata
message RawObject {
  // Unique ID for this object
  string UID = 1;

  // Identify the object kind.  This kind will be used to apply a schema to the body and
  // will trigger additional indexing behavior.
  string kind = 2;

  // Time in millies since epoch that the object was first saved
  int64 created = 3;

  // Time in millies since epoch that the object was last modified
  int64 updated = 4;

  // Who created the object
  UserInfo createdBy = 5;

  // Who modified the object
  UserInfo updatedBy = 6; 

  // Content Length
  int64 size = 7;

  // MD5 digest of the Body
  string ETag = 8;

  // Raw bytes of the storage object.  The kind+schema will ensure
  bytes body = 9;

  // A small set of properties managed by raw storage layer.  The kind+schema will define val
  map<string,string> properties = 10;

  // object version (might be commit hash, or number)
  string version = 11;

  // last time the object status was checked with an external system (provisioning/git)
  int64 syncTime = 12;

  // optional "save" or "commit" message from the author
  string comment = 13;
}

// Consistent properties exposed a search engine
message ObjectSummary {
  string UID = 1;
  string kind = 2;

  // Object display name
  string name = 3;

  // Optional description
  string description = 4;

  // Searchable key, value pairs -- "tags" are represented as keys with know value
  map<string,string> labels = 5;

  // Optional URL
  string URL = 6;

  // Error info 
  ObjectErrorInfo error = 7; 

  // map[string]interface{} -- values depend on kind
  bytes fieldsJSON = 8; // :(

  // Object references
  repeated ExternalReference references = 9;

  // Used when the raw object body defines multiple 'things'
  repeated ObjectSummary nested = 10;
}


// Searchable fields extracted from the object
message ObjectErrorInfo {
  int64 code = 1; // TODO... registry somewhere...  should be limited to most severe issues
  string message = 2;
  string details = 3;
}


message ExternalReference {
  // datasource, panel
  string kind = 1;

  // prometheus / heatmap
  string type = 2;

  // Unique ID for this object
  string UID = 3;
}


//-----------------------------------------------
// Get request/response
//-----------------------------------------------

message ReadObjectRequest {
  string UID = 1;
  string kind = 2;

  // Fetch an explicit version
  string version = 3;

  // Include the full body bytes
  bool withBody = 4;

  // Include derived summary metadata
  bool withSummary = 5;
}

message ReadObjectResponse {
  // Object details with the body removed
  RawObject object = 2; 

  // Extracted info used for search
  ObjectSummary summary = 3;
}

//-----------------------------------------------
// Write request/response
//-----------------------------------------------

message WriteObjectRequest {
  string UID = 1;
  string kind = 2;

  // The raw object body
  bytes body = 9;

  // Message that can be seen when exploring object history
  string comment = 13;

  // Raw properties from storage
  map<string,string> properties = 10;

  // Used for optimistic locking.  If missing, the previous version will be replaced regardless
  string previousVersion = 4;
}

message WriteObjectResponse {
  // Error info -- if exists, the save did not happen
  ObjectErrorInfo error = 1;

  // Object details with the body removed
  RawObject object = 2; 

  // Extracted info used for search
  ObjectSummary summary = 3;
}

//-----------------------------------------------
// Delete request/response
//-----------------------------------------------

message DeleteObjectRequest {
  string UID = 1;
  string kind = 2;

  // Used for optimistic locking.  If missing, the previous version will be replaced regardless
  string previousVersion = 4;
}

message DeleteObjectResponse {
  bool OK = 1;
}

//-----------------------------------------------
// History request/response
//-----------------------------------------------

message ObjectHistoryRequest {
  // Starting from the requested page
  string nextPageToken = 4;

  // Maximum number of items to return
  int64 limit = 3; 

  // Object identifier
  string UID = 1;

  // type of object we are listing
  string kind = 2;
}

message ObjectHistoryResponse {
  // Object metadata without the raw bytes
  repeated RawObject object = 1;

  // More results exist... pass this in the next request
  string nextPageToken = 3;
}


//-----------------------------------------------
// List request/response
//-----------------------------------------------

message ObjectSearchRequest {
  // Starting from the requested page (other query parameters must match!)
  string nextPageToken = 1;

  // Maximum number of items to return
  int64 limit = 2; 

  // Free text query string -- mileage may vary :)
  string query = 3;

  // limit to a specific kind (empty is all)
  repeated string kind = 4;

  // Limit results to items in a specific folder
  string folder = 5;

  // Must match all labels
  map<string,string> labels = 6;

  // Find items that match a given reference
  ExternalReference reference = 7;

  // Sorting instructions `field ASC/DESC`
  repeated string sort = 8;

  // TODO, limit the set of fields we actually want returned
  // Only supported in the QueryResponse flavor?
  repeated string fields = 9;

  // Return the full body in each payload
  bool withBody = 10;
}

message ObjectSearchResponse {
  repeated RawObject results = 1;

  // More results exist... pass this in the next request
  string nextPageToken = 3;
}


//-----------------------------------------------
// Storage interface
//-----------------------------------------------

// This assumes a future grpc interface where the user info is passed in context, not in each message body
// for now it will only work with an admin API key
service ObjectStore {
  rpc Read(ReadObjectRequest) returns (ReadObjectResponse);
  rpc Write(WriteObjectRequest) returns (WriteObjectResponse);
  rpc Delete(DeleteObjectRequest) returns (DeleteObjectResponse);
  rpc History(ObjectHistoryRequest) returns (ObjectHistoryResponse);
  rpc Search(ObjectSearchRequest) returns (ObjectSearchResponse);

// Ideally an additional search endpoint with more flexibility to limit what you actually care about
//  https://github.com/grafana/grafana-plugin-sdk-go/blob/main/proto/backend.proto#L129
//  rpc SearchEX(ObjectSearchRequest) returns (DataResponse);
}
